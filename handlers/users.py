from datetime import datetime, timedelta
from aiogram.filters import CommandStart, Command, StateFilter 
from aiogram import F, Bot, types
from aiogram.types import Message, FSInputFile

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from services import *
# from create_bot import *
from create_bot import dp, bot
from keyboards import *
from settings import *
from fsm_classes import *



# ================================================== commands

@dp.message(CommandStart())
async def command_start_handler(msg: types.Message) -> None:
    # add user in db
    prn(msg)
    print("username = ", msg.chat.username, "       msg.from_user.id = ", msg.from_user.id)

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
    addUserDB(msg.from_user.id, msg.from_user.first_name, msg.from_user.last_name, msg.from_user.username, msg.date)

    text = f'''–ü—Ä–∏–≤–µ—Ç, {msg.chat.username}!
–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ—á–∞—Å–æ–≤–∫—É —á—É–≤—Å—Ç–≤.
–î–ª—è —Å—Ç–∞—Ä—Ç–∞, –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É üëá
'''
    
    # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
    if isDataUserAlreadyDB(msg.from_user.id):
        pass

    


    # try:
    if msg.text == '/start':
        pass # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    else:
        # –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        command, referer_id = msg.text.split(' ', 1)
        prn(f'referer {referer_id}', f'user {msg.from_user.id}' )
        
        addRefererDB(msg.from_user.id, referer_id, msg.date)
        print('addRefererDB DONE')
        
    
    # await msg.answer(text, reply_markup=iKM_start_btn)
    await msg.answer(text, reply_markup=KB_start_btn)
    # await msg.answer(text, reply_markup=KB_del)


# @dp.message(Command('help'))
# async def help_command(msg: Message) -> None:
#     text = '''–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ –¢–µ—Ä—Ä–∞ –ß–µ–ª—è–±–∏–Ω—Å–∫. –ò –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.'''
#     await msg.answer(text, reply_markup=iKM_help_btn)

@dp.message(Command('referal'))
async def referal_command(msg: Message) -> None:
    text = f'''–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ URL?start={msg.from_user.id}'''
    await msg.answer(text)


@dp.message(Command('reflist'))
async def reflist_command(msg: Message) -> None:
    count, user_list = showRefererListDB(msg.from_user.id)
    text = f'''–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π ( {count} ) \n\n<pre>{user_list}</pre>'''
    await msg.answer(text)


@dp.message(Command('present'))
async def present_command(msg: Message) -> None:
    count, user_list = showRefererListDB(msg.from_user.id)
    if count >= 2:
        text = f''' –£ –≤–∞—Å –±–æ–ª—å—à–µ 2-—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö. –ü–æ–ª—É—á–∏—Ç–µ –æ–±–µ—â–∞–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫! '''
        present_file = 'who.pdf'
        await msg.answer(text)
        await msg.answer_document(FSInputFile(present_file))
    else:
        count_need = 2 - count
        text = f''' –£ –≤–∞—Å –º–µ–Ω—å—à–µ 2-—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö.\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å {getBeautifulDisplay(count_need)}'''
        await msg.answer(text)
        text = f'''–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ URL?start={msg.from_user.id}'''
        await msg.answer(text)













































# ================================================== callbacks

''' –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –ø–æ –∫–Ω–æ–ø–æ—á–∫–∞–º –ø–æ—á–∞—Å–æ–≤–∫–∏ —á—É–≤—Å—Ç–≤ –∏ —ç–º–æ—Ü–∏–π '''
@dp.callback_query(AddFeel.waiting_data, F.data.startswith('feel'))
async def add_feel_handler(call: types.CallbackQuery, state: FSMContext):
    print(f'add_feel_handler = {call.data}')
    # await call.answer()
    # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä - –Ω–∞–∑–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∞
    command, feel_name = call.data.split(',', 1)
    await call.answer(f"{feel_name} - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

    data = await state.get_data()
    print(f'data = {data}')
    user_data = data.get('user_data', [])
    # print(f'user_data = {user_data}')
    user_data.append(feel_name)
    # print(f'user_data append = {user_data}')
    # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    await state.update_data(user_data=user_data)



''' –∑–∞–≤–µ—Ä—à–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—á–∞—Å–æ–≤–∫–∏ '''
@dp.callback_query(AddFeel.waiting_data, F.data.startswith('done'))
async def finish_feel_handler(call: types.CallbackQuery, state: FSMContext):
    # print(f'finish_feel_handler = {call.data}')
    print('‚úÖ‚úÖ‚úÖ')
    prn(call)
    await call.answer()
    data = await state.get_data()
    print(f'data = {data}')
    user_data = data.get('user_data', [])
    print(f'user_data = {user_data}')
    date_time = datetime.datetime.now()
    # –ü—Ä–æ—Ö–æ–∂—É—å –ø–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É —á—É–≤—Å—Ç–≤ –∏ –∑–∞–Ω–æ—à—É –≤ –±–∞–∑—É
    # for feel_name in user_data:
    if user_data:
        addManyFeelCheck(call.from_user.id, user_data)
        text = ', '.join(user_data)
    else:
        text = "–ñ–¥–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ üôè"

    await state.clear()
    await call.message.edit_text(text, reply_markup=None)






''' –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã '''
@dp.callback_query(AddFeel.waiting_data, F.data.startswith('ikb'))
async def change_ikb_handler(call: types.CallbackQuery, state: FSMContext):
    command, num = call.data.split(',', 1)
    # ikb, feel, num = call.data.split('_', 3)
    num = int(num)
    print(f'num = {num}')
    text = f"–°–ø–∏—Å–æ–∫ —á—É–≤—Å—Ç–≤ –∏ —ç–º–æ—Ü–∏–π: –°—Ç—Ä–∞–Ω–∏—Ü–∞ {num} –∏–∑ {len(iKB_Feels)}"
    await call.message.edit_text(text, reply_markup=iKB_Feels[num-1])



































# ================================================== FSM start waiting_feel


# ''' —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é –∏ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö '''
# @dp.message(AddFeel.waiting_data)
# async def add_feel_save_handler(msg: Message, state: FSMContext):
    
#     # data = await state.get_data()
    
#     await state.update_data(admin_id=msg.text)
    
#     # if addNewAdminToDB(data):   text = '–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!'
#     # else:                           text = f'‚ö†Ô∏è –û—à–∏–±–∫–∞ '
        
#     # await state.clear()
#     text = '–Ω–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é...'
#     await msg.answer(text)

















# # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –∏ —Ö—ç—à—Ç–µ–≥
# @dp.message(StateFilter(None), F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
# @dp.message(StateFilter(None), F.text == '–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ')
# async def add_name_handler(msg: Message, state: FSMContext):
#     await msg.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', reply_markup=KB_del)
#     await state.set_state(DataUsers.name)

# @dp.message(StateFilter('*'), Command('–æ—Ç–º–µ–Ω–∞'))
# @dp.message(StateFilter('*'), F.text.casefold() == '–æ—Ç–º–µ–Ω–∞')
# async def cancel_handler(msg: Message, state: FSMContext) -> None:
#     current_state = await state.get_state()
#     if current_state is None:
#         return
#     await state.clear()
#     await msg.answer('–û—Ç–º–µ–Ω–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.')




# @dp.message(StateFilter('*'), Command('–Ω–∞–∑–∞–¥'))
# @dp.message(StateFilter('*'), F.text.casefold() == '–Ω–∞–∑–∞–¥')
# async def back_handler(msg: Message, state: FSMContext) -> None:
#     current_state = await state.get_state()
#     print(f'current_state = {current_state}')
#     # if current_state == DataUser.name:
#     #     await msg.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–º–µ–Ω–∞')
#     # previous = None
#     # for step in DataUser.__all_states__:
#     #     if step.state == current_state:
#     #         await state.set_state(previous)
#     #         await msg.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥\n{DataUser.texts[previous.state]}')
#     #         return
#     #     previous = step


# @dp.message(DataUsers.name, F.text)
# async def add_name_handler(msg: Message, state: FSMContext):
#     await state.update_data(name=msg.text)
#     await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –≤–∏–¥–∞ #–∏–º—è_—Ñ–∞–º–∏–ª–∏—è')
#     await state.set_state(DataUsers.tag)


# @dp.message(DataUsers.tag, F.text)
# async def add_name_handler(msg: Message, state: FSMContext):
#     await state.update_data(tag=msg.text)
#     # await msg.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã:')
#     data = await state.get_data()
#     text = f'''<pre>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:

# –í–∞—à–µ –∏–º—è: {data['name']}
# –•—ç—à—Ç–µ–≥: {data['tag']}
# </pre>
# '''
#     # –¥–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
#     addDataUsersToDB(msg.from_user.id, data['name'], data['tag'])

#     await msg.answer(text)
#     # await state.clear()
    

#     # await state.set_state(FinanceSurveyUsers.city)







# # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –∏ —Ö—ç—à—Ç–µ–≥
# @dp.message(StateFilter(None), F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
# @dp.message(StateFilter(None), F.text == '–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ')
# async def add_name_handler(msg: Message, state: FSMContext):
#     await msg.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', reply_markup=KB_del)
#     await state.set_state(DataUsers.name)

# @dp.message(StateFilter('*'), Command('–æ—Ç–º–µ–Ω–∞'))
# @dp.message(StateFilter('*'), F.text.casefold() == '–æ—Ç–º–µ–Ω–∞')
# async def cancel_handler(msg: Message, state: FSMContext) -> None:
#     current_state = await state.get_state()
#     if current_state is None:
#         return
#     await state.clear()
#     await msg.answer('–û—Ç–º–µ–Ω–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.')





















































# ================================================== Message

@dp.message(Command('hourly_feelings'))
@dp.message(StateFilter(None), F.text == '–ü–æ—á–∞—Å–æ–≤–∫–∞ —á—É–≤—Å—Ç–≤')
# @dp.message(F.text == '–ü–æ—á–∞—Å–æ–≤–∫–∞ —á—É–≤—Å—Ç–≤')
async def add_feel_handler(msg: Message, state: FSMContext) -> None:
    text = f"–°–ø–∏—Å–æ–∫ —á—É–≤—Å—Ç–≤ –∏ —ç–º–æ—Ü–∏–π: –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {len(iKB_Feels)}"
    text1 = f"–û—Å—Ç–∞–Ω–æ–≤–∏—Å—å, —Å–¥–µ–ª–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤. –ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ..."
    await state.set_state(AddFeel.waiting_data)
    await msg.delete()
    await msg.answer(text1, reply_markup=KB_del)
    await msg.answer(text, reply_markup=iKB_Feels_1)
    await state.update_data(data_msg_id=msg.message_id)
    prn(msg)





@dp.message(StateFilter('*'), F.text.casefold() == '–ü–æ—á–∞—Å–æ–≤–∫–∞ —á—É–≤—Å—Ç–≤')
async def comment_feel_handler(msg: Message) -> None:
    text = "–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ —á—É–≤—Å—Ç–≤ –∏ —ç–º–æ—Ü–∏–π"
    await msg.answer(text)






# —ç—Ö–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
# @dp.message()
# async def echo_handler(
#     message: types.Message, bot: Bot, apscheduler: AsyncIOScheduler
# ) -> None:
#     """
#     Handler will forward receive a message back to the sender

#     By default, message handler will handle all message types (like a text, photo, sticker etc.)
#     """
#     try:
#         # Send a copy of the received message
#         dt = datetime.datetime.now() + timedelta(seconds=5)
#         # print(dt, bot, message.chat.id, message.text)
#         apscheduler.add_job(
#             send_message_scheduler,
#             trigger="date",
#             run_date=dt,
#             kwargs={
#                 "bot": bot,
#                 "message": message.text,
#                 "user_id": message.chat.id,
#             },
#         )
#     except TypeError:
#         # But not all the types is supported to be copied so need to handle it
#         await message.answer("Nice try!")