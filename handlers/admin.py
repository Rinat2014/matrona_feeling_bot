# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞:

# Commands
# Callbacks
# FSM commands
# Messages






import xlwt
from datetime import datetime, timedelta

from aiogram import F, types
from aiogram.types import Message, FSInputFile
from aiogram.fsm.strategy import FSMStrategy
# from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext


from settings import *
from services import *
# from orm_classes import *
from fsm_classes import *
from create_bot import dp, bot
from keyboards import *




from aiogram.filters import Command, StateFilter 
from aiogram import F, Bot, types


from services import *
# from create_bot import dp
# from terra_reports import dp
from keyboards import KB_start_btn
from settings import *














































# ================================================== commands


''' –∞–¥–º–∏–Ω–∫–∞ '''                             ''' –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è '''
@dp.message(Command('admin'))
async def admin_handler(msg: Message):
    if isAdmin(msg.from_user.id):
        pass
        msg_text = '–ê–¥–º–∏–Ω–∫–∞'
        await msg.answer(msg_text, 
                         reply_markup=iKB_admin) # –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏–¥–µ—Ç —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    else:
        pass
        msg_text = 'You are not admin!'
        await msg.answer(msg_text)













# ================================================================================ adminka
''' –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –±–∞–∑—ã  '''
@dp.message(Command('admin'))
async def admin_command(msg: Message) -> None:
    print('üî¥ admin command - DB backup ', msg.chat.id, datetime.now())
    # –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º
    if msg.chat.id == admin_id:
        await msg.answer_document(FSInputFile(db_file))


''' –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º  '''
@dp.message(Command('admin_send_message'))
async def send_message_command(msg: Message) -> None:
    print('üî¥ admin command - send message all users', msg.chat.id, datetime.now())
    # –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º
    if msg.chat.id == admin_id:
        # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π users_id
        users_id = getUsersId()
        print('users_id = ', users_id)
        for id in users_id:
            # msg = 'Message for all users'
            await bot.send_message(chat_id=int(id), text=message_for_all_users)











































# ================================================== callbacks


''' –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ '''
@dp.callback_query(F.data == "show_admin_list_to_del")
async def show_admin_list(call: types.CallbackQuery):
    await call.answer()
    admins = Admin.select() # –¥–µ–ª–∞–µ–º –≤—Å—é –≤—ã–±–æ—Ä–∫—É –∏–∑ –±–∞–∑—ã –ø–æ –∞–¥–º–∏–Ω–∞–º
    # 1) —Å–æ–∑–¥–∞—Ç—å inline –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    # 2) –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞
    for admin in admins: # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–≤–æ–¥
        text = f'<code>{admin.admin_id.user_id}</code> - {admin.admin_id.first_name} - @{admin.admin_id.username}\n'
        iKB_delete_admin = kbDelAdmin(admin.admin_id.first_name, admin.admin_id.user_id)     
        await call.message.answer(f'{text}', reply_markup=iKB_delete_admin)



''' —É–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ '''
@dp.callback_query(F.data.startswith("drop_admin"))
async def delete_admin(call: types.CallbackQuery):
    await call.answer()
    command, drop_admin_id = call.data.split(',', 1)
    user = User.get(User.user_id == drop_admin_id) 
    admin = Admin.get(Admin.admin_id == user)
    admin.delete_instance() # —É–¥–∞–ª—è–µ–º —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
    # username = admin.admin_id.username if admin.admin_id.username != '' else 
    await call.message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å  @{admin.admin_id.username} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')



''' –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ '''
@dp.callback_query(F.data == "show_admins")
async def show_all_admins(call: types.CallbackQuery):
    await call.answer()
    if isAdmin(call.from_user.id):
        admins = Admin.select() # –¥–µ–ª–∞–µ–º –≤—Å—é –≤—ã–±–æ—Ä–∫—É –∏–∑ –±–∞–∑—ã –ø–æ –∞–¥–º–∏–Ω–∞–º
        text = ''
        for admin in admins: # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–≤–æ–¥
            text += f'<code>{admin.admin_id.user_id}</code> - {admin.admin_id.first_name} - @{admin.admin_id.username}\n'
        print(f'text = {text}')
        # text += ''
        await call.message.answer(f'<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:</b>\n{text}')
    else:
        pass
        msg_text = 'You are not admin!'
        await call.message.answer(msg_text)



''' –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤ '''
@dp.callback_query(StateFilter(None), F.data == "add_admin")
async def add_new_admins(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if isAdmin(call.from_user.id):
        await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.\n–ß—Ç–æ–± —É–∑–Ω–∞—Ç—å —Å–≤–æ–π id –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /me_info\n–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞ (–º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ /start)')
        await state.set_state(AddAdmin.admin_id)
    else:
        msg_text = 'You are not admin!'
        await call.message.answer(msg_text)



''' –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ '''
@dp.callback_query(F.data == "fs_answers_to_admin")
async def get_answers_to_admin(call: types.CallbackQuery):
    await call.answer()

    # answers = Answer.select() # –¥–µ–ª–∞–µ–º –≤—Å—é –≤—ã–±–æ—Ä–∫—É –∏–∑ –±–∞–∑—ã
    # text = ''
    # for ans in answers:
    #     text += f'–ò–º—è: {ans.name}\n–¢–µ–ª–µ—Ñ–æ–Ω:<code>{ans.phone}</code> \n–í–æ–ø—Ä–æ—Å: {ans.description}\n–î–∞—Ç–∞: {ans.answer_date}\n\n'
    # print(f'text = {text}')
    text = '–ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.'
    # text = '–í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–æ–≤ (–∞–¥–º–∏–Ω–∫–∞)'
    await call.message.answer(f'<b>–î–∞–Ω–Ω—ã–µ: </b>\n\n{text}')


# ''' –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤ xls —Ñ–æ—Ä–º–∞—Ç–µ '''
# @dp.callback_query(F.data == "fs_answers_to_admin_xls")
# async def get_answers_to_admin_in_xls(call: types.CallbackQuery):
#     await call.answer()

#     if isAdmin(call.from_user.id):
#         text = '–¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —ç–∫—Å–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã'
#         await call.message.answer(f'<b>–î–∞–Ω–Ω—ã–µ: </b>\n\n{text}')

    #     # 1) –î–µ–ª–∞–µ–º –≤—ã–±–æ—Ä–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–º –Ω—É–∂–Ω–∞. –ü–æ –Ω–∞—á–∞–ª—É —ç—Ç–æ –±—É–¥–µ—Ç –≤—Å—è –±–∞–∑–∞
    #     # 2) —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª xls, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: simple_inquirer_bot__iser_id.xls (–Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –Ω—É–∂–Ω—ã–º –∏–º–µ–Ω–µ–º)
    #     # 3) –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    #     # 4) –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º—É —Ü–∏–∫–ª—É –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∑–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ xls —Ñ–∞–π–ª
    #     # 5) —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    #     # 6) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    #     # –≥–æ—Ç–æ–≤–æ
        
        
    #     # 1) –í—ã–±–æ—Ä–∫–∞
    #     fss = ''#FinancialSurvey.select() # –¥–µ–ª–∞–µ–º –≤—Å—é –≤—ã–±–æ—Ä–∫—É –∏–∑ –±–∞–∑—ã
        
    #     text = ''
    #     # 2) —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã
    #     # now = datetime(call.message.date)
    #     now = call.message.date
    #     file_name = f'{now.strftime("%Y_%m_%d__%H_%M_%S")}__bot_reports.xls'
    #     # file_name = f'simple_inquirer_bot__{call.from_user.id}.xls'
    #     # 3) –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    #     book = xlwt.Workbook(encoding="utf-8")
    #     sheet1 = book.add_sheet("Financial survey")
    #     sheet1.write(0, 0, "–ò–º—è")
    #     sheet1.write(0, 1, "–í–æ–∑—Ä–∞—Å—Ç")
    #     sheet1.write(0, 2, "–ì–æ—Ä–æ–¥")
    #     sheet1.write(0, 3, "–†–∞–±–æ—Ç–∞")
    #     sheet1.write(0, 4, "–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω.–≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏")
    #     sheet1.write(0, 5, "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è")
    #     sheet1.write(0, 6, "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    #     sheet1.write(0, 7, "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥")
    #     sheet1.write(0, 8, "–¶–µ–ª–∏")
    #     sheet1.write(0, 9, "–û–±—É—á–µ–Ω–∏–µ")
    #     sheet1.write(0, 10, "–ú–æ—è –ø–æ–ª—å–∑–∞ –¥–ª—è –≤–∞—Å")
    #     sheet1.write(0, 11, "–¢–µ–ª–µ—Ñ–æ–Ω")
    #     sheet1.write(0, 12, "–î–∞—Ç–∞")
    #     # 4) –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º—É —Ü–∏–∫–ª—É –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∑–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ xls —Ñ–∞–π–ª
    #     for fs in fss:
    #         row = int(fs.id)
    #         sheet1.write(row, 0, fs.name)
    #         sheet1.write(row, 1, fs.age)
    #         sheet1.write(row, 2, fs.city)
    #         sheet1.write(row, 3, fs.job)
    #         sheet1.write(row, 4, fs.grade)
    #         sheet1.write(row, 5, fs.fin_count)
    #         sheet1.write(row, 6, fs.fin_tools)
    #         sheet1.write(row, 7, fs.fin_passive)
    #         sheet1.write(row, 8, fs.goals)
    #         sheet1.write(row, 9, fs.study)
    #         sheet1.write(row, 10, fs.benefit)
    #         sheet1.write(row, 11, fs.phone)
    #         sheet1.write(row, 12, fs.date_time)
    #     # 5) —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    #     book.save(file_name)
    #     # 6) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    #     # await call.answer_document(FSInputFile(my_csv_file), caption=f'rows {rows}')
    #     # await call.answer
    #     # await call.message.answer(f'<b>–î–∞–Ω–Ω—ã–µ: </b>\n\n{text}')
    #     await bot.send_document(call.from_user.id, FSInputFile(file_name), caption='–§–∏–Ω –æ–ø—Ä–æ—Å—ã')
    # else:
    #     pass
    #     msg_text = 'You are not admin!'
    #     await call.message.answer(msg_text)





































# ================================================== FSM add admins

''' –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ id-—à–Ω–∏–∫–∞'''
@dp.message(AddAdmin.admin_id, F.text)
async def add_admin_save_handler(msg: Message, state: FSMContext):
    if isAdmin(msg.from_user.id):
        await state.update_data(admin_id=msg.text)
        data = await state.get_data()
        admin_id = data['admin_id']
        prn(admin_id)
        if addNewAdminToDB(admin_id):   text = '–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!'
        else:                           text = f'‚ö†Ô∏è –û—à–∏–±–∫–∞ '
            
        await state.clear()
        await msg.answer(text)

    else:
        await msg.answer('You are not admin! üßê ')